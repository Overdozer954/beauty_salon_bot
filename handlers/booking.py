from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.models import Booking
from database.db import get_db

router = Router()

# –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ü–µ–Ω–æ–π
SERVICES = {
    "–ú–∞—Å—Å–∞–∂": {
        "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂ (–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ)": {"1—á": "40‚Ç¨", "1.5—á": "50‚Ç¨", "2—á": "60‚Ç¨"},
        "–ì–æ—Ä—è—á–∏–µ –∫–∞–º–Ω–∏ (–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ)": {"1.5—á": "60‚Ç¨", "2—á": "70‚Ç¨"},
        "–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π –º–∞—Å—Å–∞–∂ (2 –∑–æ–Ω—ã)": {"45–º": "40‚Ç¨", "1—á": "50‚Ç¨"},
        "–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π –º–∞—Å—Å–∞–∂ (–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ)": {"1.5—á": "65‚Ç¨"},
        "–†–µ–ª–∞–∫—Å–∏—Ä—É—é—â–∏–π –º–∞—Å—Å–∞–∂ (–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ)": {"1—á": "40‚Ç¨", "1.5—á": "50‚Ç¨", "2—á": "60‚Ç¨"},
        "–§–∏—Ç–Ω–µ—Å –¥–ª—è –ª–∏—Ü–∞": {"30–º": "30‚Ç¨", "45–º": "40‚Ç¨"},
        "–ê—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂ (–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ)": {"1—á": "40‚Ç¨", "1.5—á": "50‚Ç¨", "2—á": "60‚Ç¨"},
    },
    "–≠–ø–∏–ª—è—Ü–∏—è": {
        "–ü–æ–¥–º—ã—à–∫–∏ + –ë–∏–∫–∏–Ω–∏": {"-": "55‚Ç¨"},
        "–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ": {"-": "99‚Ç¨"},
    },
    "Beautylizer": {
        "–°–∫—É–ª—å–ø—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ (–û–±—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ + –ú–∞—Å—Å–∞–∂)": {"60–º": "45‚Ç¨"},
        "BeautyLizer (1 –∑–æ–Ω–∞)": {"30–º": "40‚Ç¨"},
        "BeautyLizer (2 –∑–æ–Ω—ã)": {"45–º": "55‚Ç¨"},
        "BeautyLizer (–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ)": {"1—á": "70‚Ç¨"},
    },
}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /book –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É"
@router.message(lambda message: message.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É")
async def book_service(message: types.Message):
    builder = InlineKeyboardBuilder()
    for service in SERVICES:
        builder.button(text=service, callback_data=f"service_{service}")
    builder.adjust(1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
        reply_markup=builder.as_markup(),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥–∏
@router.callback_query(lambda c: c.data.startswith("service_"))
async def choose_service(callback: types.CallbackQuery):
    service_category = callback.data.split("_")[1]
    services = SERVICES[service_category]

    builder = InlineKeyboardBuilder()
    for service_name, details in services.items():
        for duration, price in details.items():
            builder.button(
                text=f"{service_name} ({duration}) - {price}",
                callback_data=f"book_{service_category}_{service_name}_{duration}",
            )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
    builder.adjust(1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{service_category}':",
        reply_markup=builder.as_markup(),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
@router.callback_query(lambda c: c.data.startswith("book_"))
async def confirm_booking(callback: types.CallbackQuery):
    data = callback.data.split("_")
    service_category = data[1]
    service_name = data[2]
    duration = data[3]
    price = SERVICES[service_category][service_name][duration]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    booking = Booking(
        telegram_id=callback.from_user.id,
        telegram_name=callback.from_user.username,
        first_name=callback.from_user.first_name,
        appointed_date="–î–∞—Ç–∞ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–∑–∂–µ",
        appointed_time="–í—Ä–µ–º—è –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ –ø–æ–∑–∂–µ",
        procedure_zone=service_category,
        procedure_type=service_name,
        price=price,
        email="user@example.com",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email
        phone="+1234567890",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    )
    db.add(booking)
    db.commit()
    db.refresh(booking)
    db.close()

    await callback.message.answer(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É:\n\n"
        f"**–£—Å–ª—É–≥–∞:** {service_name}\n"
        f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {service_category}\n"
        f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration}\n"
        f"**–¶–µ–Ω–∞:** {price}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä OxiBeauty! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏."
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    for service in SERVICES:
        builder.button(text=service, callback_data=f"service_{service}")
    builder.adjust(1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
        reply_markup=builder.as_markup(),
    )
